generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  telegramId  BigInt        @unique
  liveMessage LiveMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Group {
  id          String        @id @default(cuid())
  chatId      BigInt        @unique
  liveMessage LiveMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Session {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Server {
  id   String @id @default(cuid())
  host String
  port Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  players         Player[]
  playerSessions  PlayerSession[]
  dailyPlaytime   DailyPlaytime[]
  weeklyPlaytime  WeeklyPlaytime[]
  monthlyPlaytime MonthlyPlaytime[]

  @@unique([host, port])
}

model ChatWatcher {
  id       String  @id @default(cuid())
  tgChatId BigInt  @unique
  isGroup  Boolean

  liveMessages LiveMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LiveMessage {
  id                  String      @id @default(cuid())
  tgMessageId         BigInt
  tgChatId            BigInt
  chatWatcher         ChatWatcher @relation(fields: [chatWatcherTgChatId], references: [tgChatId])
  chatWatcherTgChatId BigInt
  addedById           String
  addedBy             User        @relation(fields: [addedById], references: [id])

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tgMessageId, tgChatId])
}

model Player {
  id              String            @id @default(cuid())
  uuid            String            @unique
  name            String
  serverId        String
  servers         Server[]
  sessions        PlayerSession[]
  dailyPlaytime   DailyPlaytime[]
  weeklyPlaytime  WeeklyPlaytime[]
  monthlyPlaytime MonthlyPlaytime[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerSession {
  id        String    @id @default(cuid())
  playerId  String
  serverId  String
  startTime DateTime
  endTime   DateTime?
  player    Player    @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyPlaytime {
  id       String   @id @default(cuid())
  date     DateTime
  playerId String
  serverId String
  playtime Int // Total playtime in seconds
  player   Player   @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  server   Server   @relation(fields: [serverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([date, playerId, serverId])
}

model WeeklyPlaytime {
  id       String @id @default(cuid())
  week     Int
  year     Int
  playerId String
  serverId String
  playtime Int // Total playtime in seconds
  player   Player @relation(fields: [playerId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])

  @@unique([week, year, playerId, serverId])
}

model MonthlyPlaytime {
  id       String @id @default(cuid())
  month    Int
  year     Int
  playerId String
  serverId String
  playtime Int // Total playtime in seconds
  player   Player @relation(fields: [playerId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])

  @@unique([month, year, playerId, serverId])
}
